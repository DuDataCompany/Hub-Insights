# -*- coding: utf-8 -*-
"""Streamlit Hub de Insights

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1luZSvIon3X4owY8jpYEdOtIlUeYmt-Hg
"""

!pip install streamlit -q

! pip install pytrends

import streamlit as st

! pip install gunicorn

# Importando as bibliotecas necessárias
import matplotlib.pyplot as plt
from pytrends.request import TrendReq
import streamlit as st

# Configurando a conexão com a API do Google Trends
pytrends = TrendReq(hl='pt-BR', tz=360)

# Definindo a função para classificar a pauta
def classify_pauta(mencoes_instagram, mencoes_twitter, total_engajamentos, brandfit, sentimento, media_rotulos):
    # Meta de cada uma das variáveis
    meta_mencoes = 500
    meta_engajamento = (mencoes_instagram * 36) + (mencoes_twitter * 10)
    meta_brandfit = 20
    meta_sentimento = 80
    meta_trends = 70

    # Normalização de cada variável
    menções = min(round((total_mencoes / meta_mencoes) * 100), 100)
    engajamento = min(round((total_engajamentos / meta_engajamento)* 100), 100)
    brand_fit = min(round((brandfit / meta_brandfit) * 100), 100)
    sentimento_positivo = min(round((sentimento / meta_sentimento) * 100), 100)
    media_rotulos = round(media_rotulos)

    # Peso de cada variável
    peso_menções = 0.5
    peso_engajamento = 2
    peso_brand_fit = 0.75
    peso_sentimento_positivo = 100
    numero_variaveis = 5

    # Calculando a pontuação total
    pontuação = ((menções * peso_menções) + (engajamento * peso_engajamento) + \
    (sentimento_positivo * peso_sentimento_positivo) + \
    (brand_fit * peso_brand_fit) + (media_rotulos) / numero_variaveis)

    pontuação = min(round(pontuação), 100)  # Arredondando a pontuação e ajustando para o máximo de 100

    # Regra para classificação da temperatura da pauta
    if pontuação < 41:
        return 'Fria'
    elif pontuação < 75:
        return 'Morna'
    else:
        return 'Quente'

# Criando a interface do Streamlit
st.title('Análise de Pauta')
pauta = st.text_input("Qual pauta iremos analisar?")
mencoes_instagram = st.number_input("Menções no Instagram (pauta: " + pauta + ")")
mencoes_twitter = st.number_input("Menções no Twitter (pauta: " + pauta + ")")
engajamentos_instagram = st.number_input("Engajamentos no Instagram (pauta: " + pauta + ")")
engajamentos_twitter = st.number_input("Engajamentos no Twitter (pauta: " + pauta + ")")
total_mencoes = mencoes_instagram + mencoes_twitter
total_engajamentos = engajamentos_instagram + engajamentos_twitter
brandfit = st.number_input("Brandfit (pauta: " + pauta + ")")
sentimento = st.number_input("Sentimento Positivo (pauta: " + pauta + ")")

# Processando e exibindo a classificação da pauta
if st.button("Analisar"):
    classificação = classify_pauta(mencoes_instagram, mencoes_twitter, total_engajamentos, brandfit, sentimento, media_rotulos)
    st.write("Classificação da pauta:", classificação)

    # Plotando o gráfico de tendência
    pytrends.build_payload(kw_list=[pauta], timeframe='now 7-d', geo='BR')
    dados_tendencia = pytrends.interest_over_time()
    plt.figure(figsize=(10, 5))
    dados_tendencia[pauta].plot()
    plt.title('Buscas pelo tema: ' + pauta)
    plt.xlabel('Data')
    plt.ylabel('Interesse')
    plt.grid(False)
    plt.axhline(y=dados_tendencia[pauta].mean(), color='#333333', linestyle='--', label=f'Média: {dados_tendencia[pauta].mean():.2f}')
    plt.legend()
    plt.gca().spines['top'].set_visible(False)
    plt.gca().spines['right'].set_visible(False)
    st.pyplot()

    # Exibindo a média dos rótulos
    st.write(f'Média dos rótulos de interesse: {dados_tendencia[pauta].mean():.2f}')

    # Obtendo e exibindo os dados de interesse por sub-região
    pytrends.build_payload(kw_list=[pauta], geo='BR', timeframe='now 7-d')
    interesse_sub_regiao = pytrends.interest_by_region()[pauta].sort_values(ascending=False).head(10)
    plt.figure(figsize=(10, 6))
    interesse_sub_regiao.plot(kind='bar', color='skyblue')
    plt.title('Top 10 Sub-regiões com Maior Interesse nos Últimos 7 Dias - Termo: ' + pauta)
    plt.xlabel('Sub-região')
    plt.ylabel('Interesse')
    plt.xticks(rotation=45, ha='right')
    for index, value in enumerate(interesse_sub_regiao):
        plt.text(index, value, str(value), ha='center', va='bottom')
    plt.tight_layout()
    st.pyplot()

